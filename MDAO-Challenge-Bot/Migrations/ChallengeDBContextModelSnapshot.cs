// <auto-generated />
using System;
using System.Numerics;
using MDAO_Challenge_Bot.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MDAO_Challenge_Bot.Migrations
{
    [DbContext(typeof(ChallengeDBContext))]
    partial class ChallengeDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MDAO_Challenge_Bot.Entities.TokenContract", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<byte>("Decimals")
                        .HasColumnType("smallint");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Address");

                    b.ToTable("TokenContracts", (string)null);
                });

            modelBuilder.Entity("MDAO_Challenge_Bot.Models.AirtableChallenge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("EndTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "end_date");

                    b.Property<DateTimeOffset>("StartTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasAnnotation("Relational:JsonPropertyName", "start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TweetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("AirtableChallenges", (string)null);
                });

            modelBuilder.Entity("MDAO_Challenge_Bot.Models.LaborMarket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LastUpdatedAtBlockHeight")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LaborMarket", (string)null);
                });

            modelBuilder.Entity("MDAO_Challenge_Bot.Models.LaborMarketRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("ClaimSubmitExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IPFSUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LaborMarketId")
                        .HasColumnType("bigint");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("PaymentTokenAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<BigInteger>("PaymentTokenAmount")
                        .HasColumnType("numeric");

                    b.Property<string[]>("ProjectSlugs")
                        .HasColumnType("text[]");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Requester")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ReviewExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("SubmitExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("TweetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LaborMarketId");

                    b.HasIndex("PaymentTokenAddress");

                    b.HasIndex("RequestId", "LaborMarketId")
                        .IsUnique();

                    b.ToTable("LaborMarketRequests", (string)null);
                });

            modelBuilder.Entity("MDAO_Challenge_Bot.Models.LaborMarketRequest", b =>
                {
                    b.HasOne("MDAO_Challenge_Bot.Models.LaborMarket", "LaborMarket")
                        .WithMany("Requests")
                        .HasForeignKey("LaborMarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDAO_Challenge_Bot.Entities.TokenContract", "PaymentToken")
                        .WithMany("LaborMarketRequestUsages")
                        .HasForeignKey("PaymentTokenAddress")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("LaborMarket");

                    b.Navigation("PaymentToken");
                });

            modelBuilder.Entity("MDAO_Challenge_Bot.Entities.TokenContract", b =>
                {
                    b.Navigation("LaborMarketRequestUsages");
                });

            modelBuilder.Entity("MDAO_Challenge_Bot.Models.LaborMarket", b =>
                {
                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
